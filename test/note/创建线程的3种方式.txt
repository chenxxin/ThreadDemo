package note;

创建线程的3种方式
1. 继承Thread类
	public class FirstThread extends Thread{
		public void run(){
			// ...
		}
	}
	
	new FirstThread().start();
	new FirstThread().start();
	
	多个线程之间无法共享线程类的实例变量
	
2. 实现Runnable接口
	public class SecondThread implements Runnable{
		public void run(){
			//...
		}
	}
	
	SecondThread st = new SecondThread();
	new Thread(st).start();
	new Thread(st).start();
	
	多个线程可以共享线程类的实例变量
	
3. 使用Callable和Future创建线程
	public class ThirdThread(){
		public static void main(String[] args){
			FutureTask<Integer> task = new FutureTask<>(new Callable<Integer>(){
				@Override
				public Integer call() throws Exception{
					//...
					return 3;
				}
			});
			
			new Thread(task).start();
			
			Integer result = task.get();
		}
	}
	
3种方式的对比
第一种方式（继承Thread类）：
	不能继承其他父类；
	访问当前线程，使用this。
后两种方式（推荐使用）：
	可以继承其他父类；
	访问当前线程，使用Thread.currentThread()方法；
	多个线程可以共享同一个target对象，适合多个相同线程来处理同一份资源的情况。

	